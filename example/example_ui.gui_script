local pointer = require("pointer_lock.pointer")

local function clamp01(value)
    if value < 0 then
        return 0
    elseif value > 1 then
        return 1
    else
        return value
    end
end

local function lerp(t, a, b)
    return a + (b - a) * clamp01(t)
end

local function set_alpha(node, alpha, has_outline, has_shadow)
    local color = gui.get_color(node)
    color.w = alpha
    gui.set_color(node, color)
    if alpha <= 0 then
        gui.set_enabled(node, false)
    else
        gui.set_enabled(node, true)
    end

    if has_outline then
        local outline = gui.get_outline(node)
        outline.w = alpha
        gui.set_outline(node, outline)
    end

    if has_shadow then
        local shadow = gui.get_shadow(node)
        shadow.w = alpha
        gui.set_shadow(node, shadow)
    end
end

function init(self)
    self.help_lock_mouse = gui.get_node("help_lock_mouse")
    self.help_unlock_mouse = gui.get_node("help_unlock_mouse")
    self.help_lock_mouse_alpha = 0

    self.help_toggle_cursor = gui.get_node("help_toggle_cursor")

    self.buttons = {}
    for _, name in pairs({"button1", "button2", "button3", "button4"}) do
        local button = {}
        button.body = gui.get_node(name .. "_body")
        button.hover = gui.get_node(name .. "_hover")
        button.click = gui.get_node(name .. "_click")

        table.insert(self.buttons, button)
    end
end

function final(self)
end

function update(self, dt)
    self.help_lock_mouse_alpha = lerp(0.3, self.help_lock_mouse_alpha, pointer.locked and 0 or 1)
    set_alpha(self.help_lock_mouse, self.help_lock_mouse_alpha, true, true)
    set_alpha(self.help_unlock_mouse, 1 - self.help_lock_mouse_alpha, true, true)

    set_alpha(self.help_toggle_cursor, 1 - self.help_lock_mouse_alpha / 2, true, true)

    for _, button in pairs(self.buttons) do
        set_alpha(button.hover, button.hovered and 1 or 0)
        set_alpha(button.click, button.clicked and 1 or 0)
    end
end

function on_message(self, message_id, message, sender)
end

function on_input(self, action_id, action)
    action_id, action = pointer.transform_input(action_id, action)

    for _, button in pairs(self.buttons) do
        button.hovered = gui.pick_node(button.body, action.x, action.y)
        if action_id == hash("touch") and action.pressed then
            button.clicked = gui.pick_node(button.body, action.x, action.y)
        elseif action_id == hash("touch") and action.released then
            button.clicked = false
        end
    end
end
