local cursor = require("cursor_lock.cursor")

go.property("acquire_input_focus", true)
go.property("click_action_id", hash("touch"))
go.property("unlock_action_id", hash("key_esc"))

local function lock_cursor()
    if not cursor.locked then
        if html5 then
            cursor_lock_ext.html5_request_cursor_lock()
        else
            cursor.locked = true
            cursor_lock_ext.glfw_mouse_lock()
        end
        return true
    end
    return false
end

local function unlock_cursor()
    if html5 then
        if cursor.locked then
            cursor_lock_ext.html5_exit_cursor_lock()
            return true
        end
    else
        local was_locked = cursor.locked
        cursor.locked = false
        cursor_lock_ext.glfw_mouse_unlock()
        return was_locked
    end
end

function init(self)
    if self.acquire_input_focus then
        msg.post(".", "acquire_input_focus")
    end
    
    cursor.locked = false
    cursor_lock_ext.glfw_mouse_unlock()
end

function final(self)
    cursor.locked = false
    cursor_lock_ext.glfw_mouse_unlock()
end

function update(self, dt)
    -- Check if our cursor lock request was accepted
    if html5 and not cursor.locked and cursor_lock_ext.html5_cursor_locked() then
        cursor.locked = true
    end
end

function on_message(self, message_id, message, sender)
end

function on_input(self, action_id, action)
    -- For some reason, pressing escape while locked makes the browser unlock the cursor,
    -- but Defold doesn't receive the input event
    -- So we instead check for the cursor getting unlocked here
    if html5 and cursor.locked and not cursor_lock_ext.html5_cursor_locked() then
        cursor.locked = false
        return true
    end

    if action.pressed then
        if action_id == self.click_action_id then
            return lock_cursor()
        elseif action_id == self.unlock_action_id then
            return unlock_cursor()
        end
    end
end
